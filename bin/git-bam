#!/bin/sh
set -e

# Deletes all local branches that have been merged into master/main... BAM!

root='master'
has_main=$(git branch --list main)

if [ ! -z "$has_main" ]
then
  root='main'
fi

branches=$(git branch --merged $root | grep -v $root | tr '\n', ' ')

if [ ! -z "$branches" ]
then
  echo 'Deleting branches:'
  echo $branches
  echo
  read -p "Are you sure? " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    git branch -d $branches
  fi
fi

squashed_and_merged_branches () {
  if [ "$1" = "confirm" ]; then
    git checkout -q $root && git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do mergeBase=$(git merge-base $root $branch) && [[ $(git cherry $root $(git commit-tree $(git rev-parse "$branch^{tree}") -p $mergeBase -m _)) == "-"* ]] && git branch -D $branch; done
  else
    git checkout -q $root && git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do mergeBase=$(git merge-base $root $branch) && [[ $(git cherry $root $(git commit-tree $(git rev-parse "$branch^{tree}") -p $mergeBase -m _)) == "-"* ]] && echo "$branch is merged into $root and can be deleted"; done
  fi
}

squashed_and_merged_branches

read -p "Are you sure? " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]
then
  squashed_and_merged_branches 'confirm'
fi
